// Generated by CoffeeScript 1.12.7
(function() {
  var Main, Path;

  console.log('hello');

  Path = (function() {
    function Path(mode) {
      if (mode == null) {
        mode = 'draw';
      }
      this.mode = mode;
      this.data = [];
    }

    Path.prototype.toDict = function() {
      return {
        mode: this.mode,
        data: this.data
      };
    };

    return Path;

  })();

  Main = (function() {
    function Main() {
      this.canvas = document.getElementById('canvas');
      this.context = this.canvas.getContext('2d');
      this.canvas.addEventListener('mousedown', this.mousedown.bind(this), false);
      this.canvas.addEventListener('mouseup', this.mouseup.bind(this), false);
      this.canvas.addEventListener('mousemove', this.mousemove.bind(this), false);
      $(this.canvas).on('touchstart', this.touchstart.bind(this));
      $(this.canvas).on('touchend', this.touchend.bind(this));
      $(this.canvas).on('touchmove', this.touchmove.bind(this));
      this.isDrawing = false;
      this.paths = [];
      this.path = null;
      this.mode = 'draw';
      $('#buttons .draw').click((function(_this) {
        return function() {
          return _this.mode = 'draw';
        };
      })(this));
      $('#buttons .erase').click((function(_this) {
        return function() {
          _this.paths = [];
          _this.path = null;
          return _this.draw();
        };
      })(this));
      $('#buttons .send').click((function(_this) {
        return function() {
          return _this.send();
        };
      })(this));
    }

    Main.prototype.mousedown = function(e) {
      console.log('mousedown');
      this.isDrawing = true;
      this.path = new Path(this.mode);
      this.paths.push(this.path);
      e.preventDefault();
      return false;
    };

    Main.prototype.mouseup = function(e) {
      console.log('mouseup');
      this.isDrawing = false;
      this.path = null;
      e.preventDefault();
      return false;
    };

    Main.prototype.mousemove = function(e) {
      var pos, x, y;
      pos = $(this.canvas).position();
      x = e.clientX - pos.left;
      y = e.clientY - pos.top;
      if (this.isDrawing) {
        this.path.data.push([x, y]);
      }
      this.draw();
      e.preventDefault();
      return false;
    };

    Main.prototype.touchstart = function(e) {
      console.log('touchstart');
      this.isDrawing = true;
      this.path = new Path(this.mode);
      this.paths.push(this.path);
      e.preventDefault();
      return false;
    };

    Main.prototype.touchend = function(e) {
      console.log('touchend');
      this.isDrawing = false;
      this.path = null;
      e.preventDefault();
      return false;
    };

    Main.prototype.touchmove = function(e) {
      var pos, touch, x, y;
      try {
        touch = e.touches[0];
        pos = $(this.canvas).position();
        x = touch.clientX - pos.left;
        y = touch.clientY - pos.top;
        if (this.isDrawing) {
          this.path.data.push([x, y]);
        }
        this.draw();
      } catch (error) {
        console.log('touchmove erro');
      }
      e.preventDefault();
      return false;
    };

    Main.prototype.draw = function() {
      var ctx, i, j, len, len1, path, point, ref, ref1, ref2, results, x, y;
      ctx = this.context;
      ctx.clearRect(0, 0, 640, 640);
      ref = this.paths;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        path = ref[i];
        if (path.mode === 'draw') {
          ctx.lineWidth = 8;
          ctx.lineCap = 'round';
          ctx.strokeStyle = 'black';
        } else {
          ctx.lineWidth = 32;
          ctx.lineCap = 'round';
          ctx.strokeStyle = 'white';
        }
        ctx.beginPath();
        ref1 = path.data[0], x = ref1[0], y = ref1[1];
        ctx.moveTo(x, y);
        ref2 = path.data.slice(1, path.data.length);
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          point = ref2[j];
          x = point[0], y = point[1];
          ctx.lineTo(x, y);
        }
        results.push(ctx.stroke());
      }
      return results;
    };

    Main.prototype.send = function() {
      var path, paths;
      paths = (function() {
        var i, len, ref, results;
        ref = this.paths;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          results.push(path.toDict());
        }
        return results;
      }).call(this);
      return $.ajax({
        type: 'POST',
        url: '/wave',
        data: 'data=' + JSON.stringify(paths),
        success: function() {
          return console.log('success');
        },
        error: function(e) {
          return console.log(e);
        }
      });
    };

    return Main;

  })();

  $(function() {
    $(window).on('touchmove.noScroll', function(e) {
      return e.preventDefault();
    });
    return window.main = new Main;
  });

}).call(this);
